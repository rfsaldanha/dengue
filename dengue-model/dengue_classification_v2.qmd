---
title: "Dengue case classification"
subtitle: "by symptoms and clinical condition"
author: Raphael Saldanha
date: last-modified
---

The objective of this notebook is to train a model based on laboratory-confirmed or discarded cases of Dengue and Chikungunya in Brazil, based on the symptoms, clinical conditions and other patient related variables. This trained model will be used to assess the accuracy of clinical-confirmed cases, and to reclassify cases diagnosis judged as inconclusive.

## Packages

```{r}
#| message: false
library(tidyverse)
library(arrow)
library(knitr)
library(lubridate)
library(tidymodels)
library(themis)
library(finetune)
library(bonsai)
library(tictoc)
library(vip)
source("../functions.R")

doParallel::registerDoParallel()
```

## Source Data

Datasets from SINAN Dengue and Chikungunya were previously downloaded from the Brazilian Health Ministry in DBC format, pre-processed (variables labels) and converted to the parquet format.

### Dengue

-   Data prior to 2016 does not have patient symptoms and clinical conditions
-   Data from 2016 to 2021 is being considered

```{r}
# Data sources
dengue_files_list <- c(
  data_dir("dengue_data/parquets/dengue_2016.parquet"),
  data_dir("dengue_data/parquets/dengue_2017.parquet"),
  data_dir("dengue_data/parquets/dengue_2018.parquet"),
  data_dir("dengue_data/parquets/dengue_2019.parquet"),
  data_dir("dengue_data/parquets/dengue_2020.parquet"),
  data_dir("dengue_data/parquets/dengue_2021.parquet")
)
```

`x_vars` contains the list of variables regarding symptoms and clinical conditions. `other_vars` contains names of other variables of interest.

```{r}
# Independent variables
x_vars <- c("FEBRE", "MIALGIA", "CEFALEIA", 
            "EXANTEMA", "VOMITO", "NAUSEA", 
            "DOR_COSTAS", "CONJUNTVIT", 
            "ARTRITE", "ARTRALGIA", "PETEQUIA_N", 
            "LEUCOPENIA", "LACO", "DOR_RETRO", 
            "DIABETES", "HEMATOLOG", "HEPATOPAT", 
            "RENAL", "HIPERTENSA", "ACIDO_PEPT",
            "AUTO_IMUNE")

other_vars <- c("ID_MN_RESI", "IDADEanos", "DT_SIN_PRI")
```

We will read the datasets and select the variables on interest.

```{r}
# Prepare data
dengue_full <- arrow::open_dataset(sources = dengue_files_list) |>
  # Select variables
  select(all_of(c("CLASSI_FIN", "CRITERIO", other_vars, x_vars))) |>
  collect()
```

The full dengue dataset present the following dimensions

```{r}
dim(dengue_full)
```

The variable `CLASSI_FIN` present the case's diagnoses and \`CRITERIO\` present the method used to determine the diagnose.

```{r}
dengue_full <- dengue_full |>
  # Prepare variables
  mutate(CLASSI_FIN = case_when(
    str_detect(tolower(CLASSI_FIN), "dengue") ~ "Positive Dengue",
    CLASSI_FIN == "Descartado" ~ "Discarded Dengue",
    CLASSI_FIN == "Inconclusivo" ~ "Inconclusive",
    .default = CLASSI_FIN
  )) |>
  mutate(CRITERIO = case_match(
    CRITERIO,
    "Clínico epidemiológico" ~ "Clinical and epidemiological",
    "Laboratório" ~ "Laboratorial",
    "Em investigação" ~ "Being investigated",
    .default = CRITERIO
  ))
```

Let's see how many suspected cases falls on each condition.

```{r}
dengue_full |>
  group_by(CLASSI_FIN, CRITERIO) |>
  summarise(count = n()) |>
  ungroup() |>
  gt::gt()
```

We may recode some of the cases, filter out exceptions and add a variable to retain the original information system name.

```{r}
dengue_full <- dengue_full|>
  mutate(
    CRITERIO = case_when(
      CLASSI_FIN == "Inconclusive" & is.na(CRITERIO) ~ "Other reasons",
      .default = CRITERIO
    )
  ) |>
  filter(!is.na(CRITERIO)) |>
  filter(!is.na(CLASSI_FIN)) |>
  filter(!(CLASSI_FIN == "Discarded Dengue" & CRITERIO == "Being investigated")) |>
  filter(!(CLASSI_FIN == "Inconclusive" & CRITERIO == "Being investigated")) |>
  filter(!(CLASSI_FIN == "Positive Dengue" & CRITERIO == "Being investigated")) |>
  mutate(case_source = "SINAN-Dengue")
```

```{r}
dim(dengue_full)
```

```{r}
dengue_full |>
  group_by(CLASSI_FIN, CRITERIO) |>
  summarise(count = n()) |>
  ungroup() |>
  gt::gt()
```

### Chikungunya

The same procedure executed on Dengue files is performed on Chikungunya reported suspected cases.

-   Data prior to 2017 does not have patient symptoms and clinical conditions.

```{r}
# Data sources
chik_files_list <- c(
  data_dir("chik_data/parquets/chik_2017.parquet"),
  data_dir("chik_data/parquets/chik_2018.parquet"),
  data_dir("chik_data/parquets/chik_2019.parquet"),
  data_dir("chik_data/parquets/chik_2020.parquet"),
  data_dir("chik_data/parquets/chik_2021.parquet")
)
```

```{r}
# Prepare data
chik_full <- arrow::open_dataset(sources = chik_files_list) |>
  # Select variables
  select(all_of(c("CLASSI_FIN", "CRITERIO", other_vars, x_vars))) |>
  collect()
```

```{r}
dim(chik_full)
```

```{r}
chik_full <- chik_full |>
  # Prepare variables
  mutate(CLASSI_FIN = case_when(
    str_detect(tolower(CLASSI_FIN), "chik") ~ "Positive Chikungunya",
    CLASSI_FIN == "Descartado" ~ "Discarded Chikungunya",
    CLASSI_FIN == "Inconclusivo" ~ "Inconclusive",
    .default = CLASSI_FIN
  )) |>
  mutate(CRITERIO = case_match(
    CRITERIO,
    "Clínico epidemiológico" ~ "Clinical and epidemiological",
    "Laboratório" ~ "Laboratorial",
    "Em investigação" ~ "Being investigated",
    .default = CRITERIO
  ))
```

```{r}
chik_full |>
  group_by(CLASSI_FIN, CRITERIO) |>
  summarise(count = n()) |>
  ungroup() |>
  gt::gt()
```

```{r}
chik_full <- chik_full|>
  mutate(
    CRITERIO = case_when(
      CLASSI_FIN == "Inconclusive" & is.na(CRITERIO) ~ "Other reasons",
      .default = CRITERIO
    )
  ) |>
  filter(CLASSI_FIN %in% c("Discarded Chikungunya", "Inconclusive", "Positive Chikungunya")) |>
  filter(CRITERIO %in% c("Clinical and epidemiological", "Laboratorial", "Other reasons")) |>
  mutate(case_source = "SINAN-Chikungunya")
```

```{r}
dim(chik_full)
```

```{r}
chik_full |>
  group_by(CLASSI_FIN, CRITERIO) |>
  summarise(count = n()) |>
  ungroup() |>
  gt::gt()
```

### Join datasets

We will join both datasets, correct the date variable (DT_SIN_PRI) and remove invalid rows.

```{r}
dcdata <- bind_rows(dengue_full, chik_full) |>
  mutate(DT_SIN_PRI = as_date(DT_SIN_PRI, format = "%Y-%m-%d")) |>
  mutate(IDADEanos = as.numeric(IDADEanos)) |>
  # mutate_at(.vars = x_vars, .funs = ~ . == "Sim") |>
  mutate(across(all_of(x_vars), ~ . == "Sim")) |>
  mutate(across(all_of(x_vars), as.integer)) |>
  mutate(uf_res = substr(ID_MN_RESI, 0, 2)) |>
  filter(!is.na(ID_MN_RESI)) |>
  filter(year(DT_SIN_PRI) >= 2016 & year(DT_SIN_PRI) <= 2021)
```

```{r}
dim(dcdata)
```

And remove no longer needed objects.

```{r}
rm(dengue_full, chik_full, chik_files_list, dengue_files_list)
gc()
```

```{r}
dcdata |>
  group_by(CLASSI_FIN, CRITERIO) |>
  summarise(count = n()) |>
  ungroup() |>
  gt::gt()
```

Let's see in time how the case classification and used criteria evolves.

```{r}
dcdata |>
  mutate(DT_SIN_PRI = ceiling_date(DT_SIN_PRI, "month")) |>
  filter(CLASSI_FIN != "Inconclusive") |>
  filter(CRITERIO != "Other reasons") |>
  group_by(case_source, DT_SIN_PRI, CLASSI_FIN, CRITERIO) |>
  summarise(count = n()) |>
  ungroup() |>
  ggplot(aes(x = DT_SIN_PRI, y = count, fill = CRITERIO)) +
  geom_area(stat = "identity") +
  scale_y_continuous(labels = scales::unit_format(
    unit = "k", 
    scale = 1e-3,
    accuracy = 1)
  ) +
  facet_wrap(~CLASSI_FIN + case_source, scales = "free_y") +
  theme_bw() +
  theme(legend.position = "bottom", legend.direction = "horizontal")
  
```

### Data removal

::: callout-caution
Only for tests.
:::

```{r}
dcdata <- slice_sample(.data = dcdata, n = 200000)
```

## Reference dataset

The reference dataset will contain only suspected cases that were assessed diagnosed by laboratory exams, to train and test a classification model. Cases with inconclusive classification will be discarded.

```{r}
dc_ref <- dcdata |>
  filter(CRITERIO == "Laboratorial") |>
  filter(CLASSI_FIN != "Inconclusive")
```

```{r}
dim(dc_ref)
```

```{r}
dc_ref |>
  group_by(CLASSI_FIN, CRITERIO) |>
  summarise(count = n()) |>
  ungroup() |>
  gt::gt()
```

Also, a simplified version is created, aggregating the classification not considering the specific disease, with a more balanced dataset.

```{r}
dc_ref_simp <- dc_ref |>
  mutate(CLASSI_FIN = case_match(
    CLASSI_FIN,
    "Discarded Chikungunya" ~ "Negative",
    "Discarded Dengue" ~ "Negative",
    "Positive Dengue" ~ "Positive",
    "Positive Chikungunya" ~ "Positive"
  ))
```

```{r}
dc_ref_simp |>
  group_by(CLASSI_FIN, CRITERIO) |>
  summarise(count = n()) |>
  ungroup() |>
  gt::gt()
```

## Clinical dataset

On this dataset, we will only include the cases that were classified by clinical and epidemiological criteria. Inconclusive cases will are discarded.

```{r}
dc_cli <- dcdata |>
  filter(CRITERIO == "Clinical and epidemiological") |>
  filter(CLASSI_FIN != "Inconclusive")
```

```{r}
dim(dc_cli)
```

```{r}
dc_cli |>
  group_by(CLASSI_FIN, CRITERIO) |>
  summarise(count = n()) |>
  ungroup() |>
  gt::gt()
```

Also, a simplified version of this dataset is created.

```{r}
dc_cli_simp <- dc_cli |>
  mutate(CLASSI_FIN = case_match(
    CLASSI_FIN,
    "Discarded Chikungunya" ~ "Negative",
    "Discarded Dengue" ~ "Negative",
    "Positive Dengue" ~ "Positive",
    "Positive Chikungunya" ~ "Positive"
  ))
```

```{r}
dim(dc_cli_simp)
```

```{r}
dc_cli_simp |>
  group_by(CLASSI_FIN, CRITERIO) |>
  summarise(count = n()) |>
  ungroup() |>
  gt::gt()
```

The joined data can be remove on this stage.

```{r}
rm(dcdata)
gc()
```

## Model simplified reference dataset

### Split

```{r}
dc_ref_simp_split <- initial_split(
  data = dc_ref_simp, 
  prop = 3/4, 
  strata = CLASSI_FIN
)

dc_ref_simp_training <- training(dc_ref_simp_split)
dc_ref_simp_testing <- testing(dc_ref_simp_split)
```

### Folding

```{r}
dc_ref_simp_split_folds <- dc_ref_simp_training |>
  vfold_cv(v = 10, strata = CLASSI_FIN)
```

### Recipes

```{r}
rec_ref_simp_1 <- recipe(CLASSI_FIN ~ ., data = dc_ref_simp_training) |>
  step_rm(CRITERIO, case_source, ID_MN_RESI, uf_res, DT_SIN_PRI)
```

```{r}
rec_ref_simp_2 <- recipe(CLASSI_FIN ~ ., data = dc_ref_simp_training) |>
  step_rm(CRITERIO, case_source, ID_MN_RESI, uf_res) |>
  step_date(DT_SIN_PRI, features = c("dow", "month", "year"), label = FALSE, keep_original_cols = FALSE)
```

```{r}
rec_ref_simp_3 <- recipe(CLASSI_FIN ~ ., data = dc_ref_simp_training) |>
  step_rm(CRITERIO, case_source, ID_MN_RESI) |>
  step_date(DT_SIN_PRI, features = c("dow", "month", "year"), label = FALSE, keep_original_cols = FALSE) |>
  step_dummy(uf_res)
```

### Learners

```{r}
xgb_spec <-
  boost_tree(
    trees = tune(),
    tree_depth = tune(),
    min_n = tune(),
    loss_reduction = tune(),
    sample_size = tune(),
    learn_rate = tune()
  ) |>
  set_engine("xgboost", event_level = "second") |>
  set_mode("classification")
```

### Workflow

```{r}
ref_simp_wf <- workflow_set(
  preproc = list(
    rec_ref_simp_1 = rec_ref_simp_1,
    rec_ref_simp_2 = rec_ref_simp_2,
    rec_ref_simp_3 = rec_ref_simp_3
  ), 
  models = list(xgb = xgb_spec), 
  cross = TRUE
)
```

### Tuning

```{r}
race_ctrl <- control_race(parallel_over = "everything")

ref_simp_tuning_results <- 
  ref_simp_wf |>
  workflow_map(
    "tune_race_anova",
    seed = 345,
    resamples = dc_ref_simp_split_folds,
    grid = 25,
    control = race_ctrl, 
    verbose = TRUE
  )
```

```{r}
ref_simp_tuning_ranking_results <- rank_results(ref_simp_tuning_results, rank_metric = "roc_auc")

ref_simp_tuning_ranking_results
```

```{r}
autoplot(ref_simp_tuning_results, metric = "roc_auc")
```

### Last fit

```{r}
ref_simp_selection <- ref_simp_tuning_ranking_results |>
  arrange(-mean) |>
  pull(wflow_id) |>
  first()

ref_simp_selection
```

```{r}
ref_simp_best_results <- ref_simp_tuning_results |>
  extract_workflow_set_result(ref_simp_selection) |>
  select_best("roc_auc")

ref_simp_best_results
```

```{r}
ref_simp_last_fit <- ref_simp_tuning_results |>
  extract_workflow(ref_simp_selection) |>
  finalize_workflow(ref_simp_best_results) |>
  last_fit(dc_ref_simp_split)
```

### Evaluation

```{r}
collect_metrics(ref_simp_last_fit)
```

```{r}
collect_predictions(ref_simp_last_fit) %>%
    conf_mat(CLASSI_FIN, .pred_class)
```

## Model reference dataset

### Split

```{r}
dc_ref_split <- initial_split(
  data = dc_ref, 
  prop = 3/4, 
  strata = CLASSI_FIN
)

dc_ref_training <- training(dc_ref_split)
dc_ref_testing <- testing(dc_ref_split)
```

### Folding

```{r}
dc_ref_split_folds <- dc_ref_training |>
  vfold_cv(v = 10, strata = CLASSI_FIN)
```

### Recipes

Here, we will create a number of model recipe to be trained.

```{r}
rec_ref_1 <- recipe(CLASSI_FIN ~ ., data = dc_ref_training) |>
  step_rm(CRITERIO, case_source) |>
  step_date(DT_SIN_PRI, features = c("month", "year"), label = FALSE, keep_original_cols = FALSE) |>
  step_dummy(ID_MN_RESI) |>
  step_integer(all_of(x_vars)) |>
  step_upsample(CLASSI_FIN)
```

### Learners

```{r}
xgb_spec <-
  boost_tree(
    trees = tune(),
    min_n = tune()
  ) |>
  set_engine("xgboost") |>
  set_mode("classification")
```

### Workflow

```{r}
ref_wf <- workflow_set(
  preproc = list(rec_ref_1 = rec_ref_1), 
  models = list(xgb = xgb_spec), 
  cross = TRUE
)
```

### Tuning

```{r}
race_ctrl <- control_race(parallel_over = "everything", verbose = TRUE)

ref_tuning_results <- 
  ref_wf |>
  workflow_map(
    "tune_race_anova",
    seed = 345,
    resamples = dc_ref_split_folds,
    grid = 10,
    control = race_ctrl
  )
```

```{r}
ref_tuning_ranking_results <- rank_results(ref_tuning_results, rank_metric = "roc_auc")

ref_tuning_ranking_results
```

```{r}
autoplot(ref_tuning_results, metric = "roc_auc")
```

### Last fit

```{r}
ref_selection <- ref_tuning_ranking_results |>
  arrange(-mean) |>
  pull(wflow_id) |>
  first()

ref_selection
```

```{r}
ref_best_results <- ref_tuning_results |>
  extract_workflow_set_result(ref_selection) |>
  select_best("roc_auc")

ref_best_results
```

```{r}
ref_last_fit <- ref_tuning_results |>
  extract_workflow(ref_selection) |>
  finalize_workflow(ref_best_results) |>
  last_fit(dc_ref_split)
```

### Evaluation

```{r}
collect_metrics(ref_last_fit)
```

```{r}
collect_predictions(ref_last_fit) %>%
    conf_mat(CLASSI_FIN, .pred_class)
```

## Session info

```{r}
sessionInfo()
```
