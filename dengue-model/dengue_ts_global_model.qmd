---
title: "Global Model"
author: "Raphael Saldanha"
date: last-modified
---

## Packages

```{r}
#| message: false
library(tidyverse)
library(arrow)
library(tidymodels)
library(finetune)
library(modeltime)
library(timetk)
library(tictoc)
```

## Load data

And remove rows with NAs

```{r}
tdengue <- read_parquet(file = "tdengue.parquet") %>%
  drop_na()
```

## Cluster

Assign random groups. To use a cluster algorithm later.

```{r}
tdengue <- tdengue %>%
  mutate(group = sample(x = 4, size = nrow(.), replace = TRUE))
```

## Train and test split

```{r}
tdengue_split <- tdengue %>%
  time_series_split(
    date_var = date, 
    assess = 24,
    cumulative = TRUE
  )
```

```{r}
saveRDS(object = tdengue_split, file = "tdengue_split.rds")
```

## K-folds

```{r}
tdengue_split_folds <- training(tdengue_split) %>%
  vfold_cv(v = 10)
```

## Recipes

### Global

Using data from all municipalities.

```{r}
recipe_global <- recipe(cases ~ ., data = training(tdengue_split)) %>%
  step_rm(mun, group)
```

### Groups

One recipe for each group, with data only from the group.

```{r}
recipe_group1 <- recipe(cases ~ ., data = training(tdengue_split)) %>%
  step_filter(group == 1) %>%
  step_rm(mun, group)
```

## Models

### Random forest

```{r}
rf_spec <- rand_forest(
  mtry = tune(),
  trees = tune(),
  min_n = tune()
) %>%
  set_engine("ranger") %>%
  set_mode("regression")
```

## Workflow

```{r}
rf_wf_global <- workflow() %>%
  add_recipe(recipe_global) %>%
  add_model(rf_spec)

rf_wf_group1 <- workflow() %>%
  add_recipe(recipe_group1) %>%
  add_model(rf_spec)
```

## Prepare parallel computation

```{r}
doParallel::registerDoParallel()
```

## Tune

```{r}
set.seed(123)

grid_spec <- grid_latin_hypercube(
  extract_parameter_set_dials(rf_spec) %>% 
    update(mtry = mtry(range = c(1, 10))), # 1, 20
  size = 10 # 20 
)
  
```

```{r}
tic()
tune_results_race_global <- tune_race_anova(
  object = rf_wf_global, 
  resamples = tdengue_split_folds, 
  grid = grid_spec, 
  control = control_race(parallel_over = "everything")
)
toc()
```

```{r}
tic()
tune_results_race_group1 <- tune_race_anova(
  object = rf_wf_group1, 
  resamples = tdengue_split_folds, 
  grid = grid_spec, 
  control = control_race(parallel_over = "everything")
)
toc()
```

```{r}
tune_results_race_global %>% show_best()
```

```{r}
tune_results_race_group1 %>% show_best()
```

## Select and fit best model

### Global

```{r}
best_fit <- rf_wf_global %>%
  finalize_workflow(select_best(tune_results_race_global, "rmse", n = 1)) %>%
  fit(training(tdengue_split))
```

```{r}
modeltime_table(best_fit) %>%
  modeltime_calibrate(testing(tdengue_split)) %>%
  modeltime_accuracy()
```

```{r}
modeltime_table(best_fit) %>%
  modeltime_calibrate(testing(tdengue_split)) %>%
  modeltime_forecast(
    new_data = testing(tdengue_split),
    actual_data = tdengue,
    keep_data = TRUE
  ) %>%
  filter(mun == 330455) %>%
  plot_modeltime_forecast(.conf_interval_show = FALSE)
  
```

### Group 1

```{r}
best_fit <- rf_wf_group1 %>%
  finalize_workflow(select_best(tune_results_race_group1, "rmse", n = 1)) %>%
  fit(training(tdengue_split))
```

```{r}
modeltime_table(best_fit) %>%
  modeltime_calibrate(testing(tdengue_split)) %>%
  modeltime_accuracy()
```

```{r}
modeltime_table(best_fit) %>%
  modeltime_calibrate(testing(tdengue_split)) %>%
  modeltime_forecast(
    new_data = testing(tdengue_split),
    actual_data = tdengue,
    keep_data = TRUE
  ) %>%
  filter(mun == 330455) %>%
  plot_modeltime_forecast(.conf_interval_show = FALSE)
  
```

## Session info

```{r}
sessionInfo()
```
