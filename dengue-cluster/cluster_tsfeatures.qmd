---
title: "Time series features"
subtitle: "with scaled cases"
author: "Raphael Saldanha"
date: last-modified
bibliography: references.bib
---

This notebook aims to explore time series features of dengue cases that may guide the clustering procedures. Time series features descriptions are quoted from @tsfeatures .

## Packages

```{r}
#| message: false
library(tidyverse)
library(tidymodels)
library(arrow)
library(tsfeatures)
library(broom)
library(DT)
source("../functions.R")
```

### Functions

Perform Kolmogorov-Smirnorf tests between groups statistics.

```{r}
#| code-fold: true
ks_group_test <- function(stat){
  
  tsf_group_split <- tsf_group %>%
    # Select variables and statistic
    select(group, statistic = !!stat) %>%
    # Split to list  
    group_split(group) 

  # Matrix of possible combinations
  comb <- combn(x = unique(tsf_group$group), m = 2)

  # Resuls data frame
  ks_results <- tibble()
  
  
  # For each group combination, perform ks.test
  for(i in 1:ncol(comb)){
    g_a <- comb[1,i]
    g_b <- comb[2,i]
    
    res <- ks.test(
      x = tsf_group_split[[g_a]]$statistic, 
      y =  tsf_group_split[[g_b]]$statistic
    ) %>% tidy()
    
    tmp <- tibble(
      g_a = g_a,
      g_b = g_b,
      statistic = round(res$statistic, 4),
      pvalue = round(res$p.value, 4)
    )
    
    ks_results <- bind_rows(ks_results, tmp)
  }
  
  ks_results %>%
    arrange(g_a, g_b)
}
```

## Load data

Load the bundled data (679 municipalities, pop $\geq$ 50k inhab.) with standardized cases and keep only the municipality code, date and cases variables.

```{r}
tdengue <- open_dataset(sources = data_dir("bundled_data/tdengue.parquet")) %>%
    select(mun, date, cases) %>%
    collect()
```

## Prepare data

Convert panel data to a list of `ts` objects.

```{r}
tdengue_df <- tdengue %>%
  arrange(mun, date) %>%
  select(-date) %>%
  nest(data = cases, .by = mun)

tdengue_list <- lapply(tdengue_df$data, ts)
```

## Time series features

```{r}
tsf <- tsfeatures(
  tslist = tdengue_list, 
  features = c("entropy", "stability",
               "lumpiness", "flat_spots",
               "zero_proportion", "stl_features",
               "acf_features")
)
  
tsf$mun <- tdengue_df$mun
```

All features available at the `tsfeatures` package were computed. Bellow, details about some of them.

### Shannon entropy

> Measures the "forecastability" of a time series, where low values indicate a high signal-to-noise ratio, and large values occur when a series is difficult to forecast.

$$
-\int^\pi_{-\pi}\hat{f}(\lambda)\log\hat{f}(\lambda) d\lambda
$$

```{r}
ggplot(tsf, aes(x = entropy)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

### Stability & lumpiness

> Stability and lumpiness are two time series features based on tiled (non-overlapping) windows. Means or variances are produced for all tiled windows. Then stability is the variance of the means, while lumpiness is the variance of the variances.

```{r}
ggplot(tsf, aes(x = stability)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

```{r}
ggplot(tsf, aes(x = lumpiness)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

### Flat spots

> Flat spots are computed by dividing the sample space of a time series into ten equal-sized intervals, and computing the maximum run length within any single interval.

```{r}
ggplot(tsf, aes(x = flat_spots)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

### STL features decomposition

#### Trend

```{r}
ggplot(tsf, aes(x = trend)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

#### Spike

```{r}
ggplot(tsf, aes(x = spike)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

#### Linearity

```{r}
ggplot(tsf, aes(x = linearity)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

#### Curvature

```{r}
ggplot(tsf, aes(x = curvature)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

#### First autocorrelation coefficient

```{r}
ggplot(tsf, aes(x = e_acf1)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

#### Sum of the first ten squared autocorrelation coefficients

```{r}
ggplot(tsf, aes(x = e_acf10)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

### Autocorrelation function (ACF) features

```{r}
ggplot(tsf, aes(x = x_acf1)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

```{r}
ggplot(tsf, aes(x = x_acf10)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

```{r}
ggplot(tsf, aes(x = diff1_acf1)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

```{r}
ggplot(tsf, aes(x = diff1_acf10)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

```{r}
ggplot(tsf, aes(x = diff2_acf1)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

```{r}
ggplot(tsf, aes(x = diff2_acf10)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

## Clustering

This procedure goal is to cluster the municipalities considering time series features similarities.

### K-means clustering

Cluster the municipalities based solely on the time series features.

```{r}
points <- tsf %>%
  select(-mun)
```

Uses $k$ from 2 to 10 for clustering.

```{r}
kclusts <- 
  tibble(k = 2:10) %>%
  mutate(
    kclust = map(k, ~kmeans(points, .x)),
    tidied = map(kclust, tidy),
    glanced = map(kclust, glance),
    augmented = map(kclust, augment, points)
  )
```

Isolate results.

```{r}
clusters <- 
  kclusts %>%
  unnest(cols = c(tidied))

assignments <- 
  kclusts %>% 
  unnest(cols = c(augmented))

clusterings <- 
  kclusts %>%
  unnest(cols = c(glanced))
```

The total sum of squares is plotted. The \$k=5\$ seems to be a break point.

```{r}
ggplot(clusterings, aes(k, tot.withinss)) +
  geom_line() +
  geom_point() +
  theme_bw()
```

```{r}
silhouette_score <- function(k){
  km <- kmeans(points, centers = k, nstart=25)
  ss <- cluster::silhouette(km$cluster, dist(points))
  mean(ss[, 3])
}
k <- 2:10
avg_sil <- sapply(k, silhouette_score)
plot(k, type='b', avg_sil, xlab='Number of clusters', ylab='Average Silhouette Scores', frame=FALSE)
```

### Identify municipalities and cluster id

Finally, the cluster partition ID is added to the main dataset.

```{r}
cluster_ids <- clusterings %>%
  filter(k == 5) %>%
  pull(augmented) %>%
  pluck(1) %>%
  select(group = .cluster) %>%
  mutate(mun = tdengue_df$mun)
```

### Cluster sizes

```{r}
table(cluster_ids$group)
```

### Cluster time series plot

```{r}
inner_join(tdengue, cluster_ids, by = "mun") %>%
  ggplot(aes(x = date, y = cases, color = mun)) +
  geom_line(alpha = .3) +
  facet_wrap(~group) +
  theme_bw() +
  theme(legend.position = "none")
```

## Time series features per group

Add group Id to time series feautures.

```{r}
tsf_group <- left_join(tsf, cluster_ids, by = "mun")
```

### Shannon entropy

```{r}
ggplot(tsf_group, aes(x = entropy, fill = group)) +
  geom_histogram(bins = 50, alpha = .7) +
  facet_wrap(~ group) +
  theme_bw() +
  theme(legend.position = "none")
```

```{r}
#| warning: false
ks_group_test("entropy") %>% datatable()
```

### Stability & lumpiness

```{r}
ggplot(tsf_group, aes(x = stability, fill = group)) +
  geom_histogram(bins = 50, alpha = .7) +
  facet_wrap(~ group) +
  theme_bw() +
  theme(legend.position = "none")
```

```{r}
#| warning: false
ks_group_test("stability") %>% datatable()
```

```{r}
ggplot(tsf_group, aes(x = lumpiness, fill = group)) +
  geom_histogram(bins = 50, alpha = .7) +
  facet_wrap(~ group) +
  theme_bw() +
  theme(legend.position = "none")
```

```{r}
#| warning: false
ks_group_test("lumpiness") %>% datatable()
```

### Flat spots

```{r}
ggplot(tsf_group, aes(x = flat_spots, fill = group)) +
  geom_histogram(bins = 50, alpha = .7) +
  facet_wrap(~ group) +
  theme_bw() +
  theme(legend.position = "none")
```

```{r}
#| warning: false
ks_group_test("flat_spots") %>% datatable()
```

### Zero proportion

```{r}
ggplot(tsf_group, aes(x = zero_proportion, fill = group)) +
  geom_histogram(bins = 50, alpha = .7) +
  facet_wrap(~ group) +
  theme_bw() +
  theme(legend.position = "none")
```

```{r}
#| warning: false
ks_group_test("zero_proportion") %>% datatable()
```

### STL features decomposition

#### Trend

```{r}
ggplot(tsf_group, aes(x = trend, fill = group)) +
  geom_histogram(bins = 50, alpha = .7) +
  facet_wrap(~ group) +
  theme_bw() +
  theme(legend.position = "none")
```

```{r}
#| warning: false
ks_group_test("trend") %>% datatable()
```

#### Spike

```{r}
ggplot(tsf_group, aes(x = spike, fill = group)) +
  geom_histogram(bins = 50, alpha = .7) +
  facet_wrap(~ group) +
  theme_bw() +
  theme(legend.position = "none")
```

```{r}
#| warning: false
ks_group_test("spike") %>% datatable()
```

#### Linearity

```{r}
ggplot(tsf_group, aes(x = linearity, , fill = group)) +
  geom_histogram(bins = 50, alpha = .7) +
  facet_wrap(~ group) +
  theme_bw() +
  theme(legend.position = "none")
```

```{r}
#| warning: false
ks_group_test("linearity") %>% datatable()
```

#### Curvature

```{r}
ggplot(tsf_group, aes(x = curvature, fill = group)) +
  geom_histogram(bins = 50, alpha = .7) +
  facet_wrap(~ group) +
  theme_bw() +
  theme(legend.position = "none")
```

```{r}
#| warning: false
ks_group_test("curvature") %>% datatable()
```

#### First autocorrelation coefficient

```{r}
ggplot(tsf_group, aes(x = e_acf1, fill = group)) +
  geom_histogram(bins = 50, alpha = .7) +
  facet_wrap(~ group) +
  theme_bw() +
  theme(legend.position = "none")
```

```{r}
#| warning: false
ks_group_test("e_acf1") %>% datatable()
```

#### Sum of the first ten squared autocorrelation coefficients

```{r}
ggplot(tsf_group, aes(x = e_acf10, fill = group)) +
  geom_histogram(bins = 50, alpha = .7) +
  facet_wrap(~ group) +
  theme_bw() +
  theme(legend.position = "none")
```

```{r}
#| warning: false
ks_group_test("e_acf10") %>% datatable()
```

### Autocorrelation function (ACF) features

```{r}
ggplot(tsf_group, aes(x = x_acf1, fill = group)) +
  geom_histogram(bins = 50, alpha = .7) +
  facet_wrap(~ group) +
  theme_bw() +
  theme(legend.position = "none")
```

```{r}
#| warning: false
ks_group_test("x_acf1") %>% datatable()
```

```{r}
ggplot(tsf_group, aes(x = x_acf10, fill = group)) +
  geom_histogram(bins = 50, alpha = .7) +
  facet_wrap(~ group) +
  theme_bw() +
  theme(legend.position = "none")
```

```{r}
#| warning: false
ks_group_test("x_acf10") %>% datatable()
```

```{r}
ggplot(tsf_group, aes(x = diff1_acf1, fill = group)) +
  geom_histogram(bins = 50, alpha = .7) +
  facet_wrap(~ group) +
  theme_bw() +
  theme(legend.position = "none")
```

```{r}
#| warning: false
ks_group_test("diff1_acf1") %>% datatable()
```

```{r}
ggplot(tsf_group, aes(x = diff1_acf10, fill = group)) +
  geom_histogram(bins = 50, alpha = .7) +
  facet_wrap(~ group) +
  theme_bw() +
  theme(legend.position = "none")
```

```{r}
#| warning: false
ks_group_test("diff1_acf10") %>% datatable()
```

```{r}
ggplot(tsf_group, aes(x = diff2_acf1, fill = group)) +
  geom_histogram(bins = 50, alpha = .7) +
  facet_wrap(~ group) +
  theme_bw() +
  theme(legend.position = "none")
```

```{r}
#| warning: false
ks_group_test("diff2_acf1") %>% datatable()
```

```{r}
ggplot(tsf_group, aes(x = diff2_acf10, fill = group)) +
  geom_histogram(bins = 50, alpha = .7) +
  facet_wrap(~ group) +
  theme_bw() +
  theme(legend.position = "none")
```

```{r}
#| warning: false
ks_group_test("diff2_acf10") %>% datatable()
```

## Session info

```{r}
sessionInfo()
```
