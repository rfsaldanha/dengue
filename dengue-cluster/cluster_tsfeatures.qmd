---
title: "Time series features"
subtitle: "with scaled cases"
author: "Raphael Saldanha"
date: last-modified
bibliography: references.bib
---

This notebook aims to explore time series features of dengue cases that may guide the clustering procedures. Time series features descriptions are quoted from @tsfeatures .

## Packages

```{r}
#| message: false
library(tidyverse)
library(arrow)
library(tsfeatures)
```

## Load data

Load the bundled data (326 municipalities, pop $\geq$ 100k inhab.) with standardized cases and keep only the municipality code, date and cases variables.

```{r}
tdengue <- read_parquet("../tdengue.parquet") %>%
  select(mun, date, cases)
```

## Prepare data

Convert panel data to a list of `ts` objects.

```{r}
tdengue_df <- tdengue %>%
  arrange(mun, date) %>%
  select(-date) %>%
  nest(data = cases, .by = mun)

tdengue_list <- lapply(tdengue_df$data, ts)
```

## Time series features

```{r}
tsf <- tsfeatures(
  tslist = tdengue_list, 
  features = c("entropy", "stability", "lumpiness", "flat_spots", "stl_features", "acf_features")
  )
tsf$mun <- tdengue_df$mun
```

### Shannon entropy

> Measures the "forecastability" of a time series, where low values indicate a high signal-to-noise ratio, and large values occur when a series is difficult to forecast.

$$
-\int^\pi_{-\pi}\hat{f}(\lambda)\log\hat{f}(\lambda) d\lambda
$$

```{r}
ggplot(tsf, aes(x = entropy)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

### Stability & lumpiness

> Stability and lumpiness are two time series features based on tiled (non-overlapping) windows. Means or variances are produced for all tiled windows. Then stability is the variance of the means, while lumpiness is the variance of the variances.

```{r}
ggplot(tsf, aes(x = stability)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

```{r}
ggplot(tsf, aes(x = lumpiness)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

### Flat spots

> Flat spots are computed by dividing the sample space of a time series into ten equal-sized intervals, and computing the maximum run length within any single interval.

```{r}
ggplot(tsf, aes(x = flat_spots)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

### STL features decomposition

#### Trend

```{r}
ggplot(tsf, aes(x = trend)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

#### Spike

```{r}
ggplot(tsf, aes(x = spike)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

#### Linearity

```{r}
ggplot(tsf, aes(x = linearity)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

#### Curvature

```{r}
ggplot(tsf, aes(x = curvature)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

#### First autocorrelation coefficient

```{r}
ggplot(tsf, aes(x = e_acf1)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

#### Sum of the first ten squared autocorrelation coefficients

```{r}
ggplot(tsf, aes(x = e_acf10)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

### Autocorrelation function (ACF) features

```{r}
ggplot(tsf, aes(x = x_acf1)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

```{r}
ggplot(tsf, aes(x = x_acf10)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

```{r}
ggplot(tsf, aes(x = diff1_acf1)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

```{r}
ggplot(tsf, aes(x = diff1_acf10)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

```{r}
ggplot(tsf, aes(x = diff2_acf1)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```

```{r}
ggplot(tsf, aes(x = diff2_acf10)) +
  geom_histogram(bins = 50, alpha = .7, fill = "purple") +
  theme_bw()
```
