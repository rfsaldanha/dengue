{
  "hash": "792acbf44d1e8e9fe406f277079eab9b",
  "result": {
    "markdown": "---\ntitle: \"Dengue case classification and symptons\"\nauthor: Raphael Saldanha\ndate: now\n---\n\n\n## Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(arrow)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'arrow'\n\nThe following object is masked from 'package:lubridate':\n\n    duration\n\nThe following object is masked from 'package:utils':\n\n    timestamp\n```\n:::\n\n```{.r .cell-code}\nlibrary(knitr)\nlibrary(lubridate)\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.1.0 ──\n✔ broom        1.0.5     ✔ rsample      1.1.1\n✔ dials        1.2.0     ✔ tune         1.1.1\n✔ infer        1.0.4     ✔ workflows    1.1.3\n✔ modeldata    1.1.0     ✔ workflowsets 1.0.1\n✔ parsnip      1.1.0     ✔ yardstick    1.2.0\n✔ recipes      1.0.6     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Use suppressPackageStartupMessages() to eliminate package startup messages\n```\n:::\n\n```{.r .cell-code}\nlibrary(finetune)\nlibrary(tictoc)\nlibrary(vip)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'vip'\n\nThe following object is masked from 'package:utils':\n\n    vi\n```\n:::\n:::\n\n\n## Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Data sources\nfiles_list <- c(\n  \"../dengue-data/parquets/dengue_2016.parquet\",\n  \"../dengue-data/parquets/dengue_2017.parquet\",\n  \"../dengue-data/parquets/dengue_2018.parquet\",\n  \"../dengue-data/parquets/dengue_2019.parquet\",\n  \"../dengue-data/parquets/dengue_2020.parquet\",\n  \"../dengue-data/parquets/dengue_2021.parquet\"\n)\n\n# Independent variables\nx_vars <- c(\"FEBRE\", \"MIALGIA\", \"CEFALEIA\", \n            \"EXANTEMA\", \"VOMITO\", \"NAUSEA\", \n            \"DOR_COSTAS\", \"CONJUNTVIT\", \n            \"ARTRITE\", \"ARTRALGIA\", \"PETEQUIA_N\", \n            \"LEUCOPENIA\", \"LACO\", \"DOR_RETRO\", \n            \"DIABETES\", \"HEMATOLOG\", \"HEPATOPAT\", \n            \"HEPATOPAT\", \"RENAL\", \"HIPERTENSA\",\n            \"ACIDO_PEPT\", \"AUTO_IMUNE\")\n\n# Prepare data\ndengue <- arrow::open_dataset(sources = files_list) %>%\n  # Select variables\n  select(all_of(c(\"CLASSI_FIN\", \"DT_SIN_PRI\", x_vars))) %>%\n  # Filter out \"Inconclusivo\" cases\n  filter(CLASSI_FIN != \"Inconclusivo\") %>%\n  # Collect data from parquet files\n  collect() %>%\n  # Prepare variables\n  mutate(CLASSI_FIN = case_when(\n    CLASSI_FIN != \"Descartado\" ~ TRUE,\n    .default = FALSE\n  )) %>%\n  mutate(CLASSI_FIN = as.factor(CLASSI_FIN)) %>%\n  mutate(DT_SIN_PRI = as_date(DT_SIN_PRI)) %>%\n  mutate_at(.vars = x_vars, .funs = ~ . == \"Sim\") \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Smaller dataset for tests\ndengue <- sample_n(dengue, 50000)\n```\n:::\n\n\n## Modeling\n\n### Train and test dataset split\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\ndengue_split <- dengue %>%\n  initial_split(strata = CLASSI_FIN)\n\ndengue_train <- training(dengue_split)\ndengue_test <- testing(dengue_split)\n\nset.seed(234)\ndengue_folds <- vfold_cv(dengue_train, strata = CLASSI_FIN)\n```\n:::\n\n\n### Recipe\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndengue_rec <- \n  recipe(CLASSI_FIN ~ . , data = dengue) %>%\n  step_date(DT_SIN_PRI, features = c(\"month\", \"week\", \"semester\", \"quarter\"), keep_original_cols = FALSE) %>%\n  step_integer(all_predictors())\n```\n:::\n\n\n### XGB Specification\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxgb_spec <-\n  boost_tree(\n    trees = tune(),\n    min_n = tune(),\n    mtry = tune(),\n    learn_rate = 0.01\n  ) %>%\n  set_engine(\"xgboost\") %>%\n  set_mode(\"classification\")\n```\n:::\n\n\n### Workflow\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxgb_wf <- workflow(dengue_rec, xgb_spec)\n```\n:::\n\n\n### Tuning\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndoParallel::registerDoParallel()\n\nset.seed(345)\n\ntic()\nxgb_rs <- tune_race_anova(\n  xgb_wf,\n  resamples = dengue_folds,\n  grid = 15,\n  control = control_race(verbose_elim = TRUE)\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ni Creating pre-processing data to finalize unknown parameter: mtry\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Racing will maximize the roc_auc metric.\nℹ Resamples are analyzed in a random order.\nℹ Fold10: 8 eliminated; 7 candidates remain.\n\nℹ Fold07: 3 eliminated; 4 candidates remain.\n\nℹ Fold03: 2 eliminated; 2 candidates remain.\n\nℹ Fold05: All but one parameter combination were eliminated.\n```\n:::\n\n```{.r .cell-code}\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n250.686 sec elapsed\n```\n:::\n:::\n\n\n#### Race metrics\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_metrics(xgb_rs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 9\n   mtry trees min_n .metric  .estimator  mean     n std_err .config             \n  <int> <int> <int> <chr>    <chr>      <dbl> <int>   <dbl> <chr>               \n1     4  1805    31 accuracy binary     0.626    10 0.00207 Preprocessor1_Model…\n2     4  1805    31 roc_auc  binary     0.643    10 0.00301 Preprocessor1_Model…\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_race(xgb_rs)\n```\n\n::: {.cell-output-display}\n![](dengue_classification_symptoms_conditions_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n### Last fit\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxgb_last <- xgb_wf %>%\n  finalize_workflow(select_best(xgb_rs, \"accuracy\")) %>%\n  last_fit(dengue_split)\n```\n:::\n\n\n### Evaluate on test\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_metrics(xgb_last)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  .metric  .estimator .estimate .config             \n  <chr>    <chr>          <dbl> <chr>               \n1 accuracy binary         0.627 Preprocessor1_Model1\n2 roc_auc  binary         0.649 Preprocessor1_Model1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_predictions(xgb_last) %>%\n    conf_mat(CLASSI_FIN, .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Truth\nPrediction FALSE TRUE\n     FALSE  1968 1250\n     TRUE   3410 5873\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nxgb_last %>%\n  extract_fit_engine() %>%\n  vip()\n```\n\n::: {.cell-output-display}\n![](dengue_classification_symptoms_conditions_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "dengue_classification_symptoms_conditions_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}