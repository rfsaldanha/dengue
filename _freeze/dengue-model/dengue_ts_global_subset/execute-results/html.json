{
  "hash": "d795b00a70365e5812effd1795535379",
  "result": {
    "markdown": "---\ntitle: \"Global and subset models\"\nauthor: \"Raphael Saldanha\"\ndate: last-modified\n---\n\n\nReference: https://blog.bguarisma.com/series/time-series-forecasting\n\n## Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(arrow)\nlibrary(tidymodels)\nlibrary(bonsai)\nlibrary(finetune)\nlibrary(modeltime)\nlibrary(timetk)\nlibrary(tictoc)\n```\n:::\n\n\n## Load data\n\nAnd remove rows with NAs\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntdengue <- read_parquet(file = \"tdengue.parquet\") %>%\n  drop_na()\n```\n:::\n\n\n## Cluster\n\nAssign random groups.\n\n::: callout-warning\nTo use a cluster algorithm later.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntdengue <- tdengue %>%\n  mutate(group = sample(x = 4, size = nrow(.), replace = TRUE))\n```\n:::\n\n\n## Train and test split\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntdengue_split <- tdengue %>%\n  time_series_split(\n    date_var = date, \n    assess = 24,\n    cumulative = TRUE\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nData is not ordered by the 'date_var'. Resamples will be arranged by `date`.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nOverlapping Timestamps Detected. Processing overlapping time series together using sliding windows.\n```\n:::\n:::\n\n\n## K-folds\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntdengue_split_folds <- training(tdengue_split) %>%\n  vfold_cv(v = 5)\n```\n:::\n\n\n## Recipes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecipes_list <- list()\n```\n:::\n\n\n### Global\n\nUsing data from all municipalities.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecipe_global <- recipe(cases ~ ., data = training(tdengue_split)) %>%\n  step_rm(mun, group)\n\nrecipes_list <- append(recipes_list, list(global = recipe_global))\n\nrm(recipe_global)\n```\n:::\n\n\n### Groups\n\nOne recipe for each group, with data only from the group.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(g in unique(tdengue$group)){\n  tmp <- recipe(cases ~ ., data = training(tdengue_split)) %>%\n  step_filter(group == g) %>%\n  step_rm(mun, group)\n  \n  tmp <- list(tmp)\n  tmp <- setNames(tmp, paste0(\"g\", g))\n  \n  recipes_list <- append(recipes_list, tmp)\n  \n  rm(tmp)\n}\n```\n:::\n\n\n## Models specification\n\n### Random forest\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_spec <- rand_forest(\n  trees = tune(),\n  min_n = tune()\n) %>%\n  set_engine(\"ranger\") %>%\n  set_mode(\"regression\")\n```\n:::\n\n\n### Decision tree\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt_spec <- decision_tree() %>%\n  set_engine(\"rpart\") %>%\n  set_mode(\"regression\")\n```\n:::\n\n\n## Workflow set\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_workflows <- workflow_set(\n  preproc = recipes_list, \n  models = list(rf = rf_spec, dt = dt_spec), \n  cross = TRUE\n)\n```\n:::\n\n\n## Tune\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndoParallel::registerDoParallel()\n\ntic()\nrace_results <- \n  all_workflows %>%\n  workflow_map(\n    \"tune_race_anova\",\n    seed = 345,\n    resamples = tdengue_split_folds,\n    grid = 3,\n    control = control_race(parallel_over = \"everything\"),\n    verbose = TRUE\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ni  1 of 10 tuning:     global_rf\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔  1 of 10 tuning:     global_rf (15.2s)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni\tNo tuning parameters. `fit_resamples()` will be attempted\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni  2 of 10 resampling: global_dt\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔  2 of 10 resampling: global_dt (285ms)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni  3 of 10 tuning:     g1_rf\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔  3 of 10 tuning:     g1_rf (3.4s)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni\tNo tuning parameters. `fit_resamples()` will be attempted\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni  4 of 10 resampling: g1_dt\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔  4 of 10 resampling: g1_dt (203ms)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni  5 of 10 tuning:     g3_rf\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔  5 of 10 tuning:     g3_rf (3.2s)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni\tNo tuning parameters. `fit_resamples()` will be attempted\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni  6 of 10 resampling: g3_dt\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔  6 of 10 resampling: g3_dt (203ms)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni  7 of 10 tuning:     g4_rf\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔  7 of 10 tuning:     g4_rf (3.1s)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni\tNo tuning parameters. `fit_resamples()` will be attempted\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni  8 of 10 resampling: g4_dt\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔  8 of 10 resampling: g4_dt (206ms)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni  9 of 10 tuning:     g2_rf\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔  9 of 10 tuning:     g2_rf (3.3s)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni\tNo tuning parameters. `fit_resamples()` will be attempted\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni 10 of 10 resampling: g2_dt\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ 10 of 10 resampling: g2_dt (208ms)\n```\n:::\n\n```{.r .cell-code}\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n30.789 sec elapsed\n```\n:::\n:::\n\n\n## Fit train data\n\nFor combination of each municipality, model and recipe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrained_models <- list()\nfor(w in unique(race_results$wflow_id)){\n  best_tune <- race_results %>%\n    extract_workflow_set_result(w) %>%\n    select_best(\"rmse\")\n  \n  final_fit <- race_results %>%\n    extract_workflow(w) %>%\n    finalize_workflow(best_tune) %>%\n    fit(training(tdengue_split))\n  \n  final_fit <- list(final_fit)\n  final_fit <- setNames(final_fit, paste0(w))\n  \n  trained_models <- append(trained_models, final_fit)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmodels_accuracy <- tibble()\nfor(t in 1:length(trained_models)){\n  model_tbl <- modeltime_table(trained_models[[t]]) \n\n  calib_tbl <- model_tbl %>%\n      modeltime_calibrate(\n        new_data = testing(tdengue_split), \n        id       = \"mun\"\n      )\n  \n  res <- calib_tbl %>% \n      modeltime_accuracy(\n        acc_by_id = TRUE, \n        metric_set = metric_set(rmse)\n      )\n  \n  res$.model_id <- word(names(trained_models[t]), 1, sep = \"_\")\n  \n  models_accuracy <- bind_rows(models_accuracy, res)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = models_accuracy, aes(x = .model_id, y = rmse, fill = .model_desc)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](dengue_ts_global_subset_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n## Session info\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.1.2 (2021-11-01)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0\nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0\n\nlocale:\n [1] LC_CTYPE=pt_BR.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] rpart_4.1.16       rlang_1.1.1        ranger_0.15.1      tictoc_1.2        \n [5] timetk_2.8.3       modeltime_1.2.6    finetune_1.1.0     bonsai_0.2.1      \n [9] yardstick_1.2.0    workflowsets_1.0.1 workflows_1.1.3    tune_1.1.1        \n[13] rsample_1.1.1      recipes_1.0.6      parsnip_1.1.0      modeldata_1.1.0   \n[17] infer_1.0.4        dials_1.2.0        scales_1.2.1       broom_1.0.5       \n[21] tidymodels_1.1.0   arrow_12.0.1       lubridate_1.9.2    forcats_1.0.0     \n[25] stringr_1.5.0      dplyr_1.1.2        purrr_1.0.1        readr_2.1.4       \n[29] tidyr_1.3.0        tibble_3.2.1       ggplot2_3.4.2      tidyverse_2.0.0   \n\nloaded via a namespace (and not attached):\n [1] minqa_1.2.5         colorspace_2.1-0    ellipsis_0.3.2     \n [4] class_7.3-20        rstudioapi_0.14     farver_2.1.1       \n [7] listenv_0.9.0       furrr_0.3.1         bit64_4.0.5        \n[10] prodlim_2023.03.31  fansi_1.0.4         codetools_0.2-18   \n[13] splines_4.1.2       doParallel_1.0.17   knitr_1.43         \n[16] jsonlite_1.8.7      nloptr_2.0.3        compiler_4.1.2     \n[19] backports_1.4.1     assertthat_0.2.1    Matrix_1.5-4.1     \n[22] fastmap_1.1.1       cli_3.6.1           htmltools_0.5.5    \n[25] prettyunits_1.1.1   tools_4.1.2         gtable_0.3.3       \n[28] glue_1.6.2          Rcpp_1.0.10         DiceDesign_1.9     \n[31] vctrs_0.6.3         nlme_3.1-155        iterators_1.0.14   \n[34] timeDate_4022.108   gower_1.0.1         xfun_0.39          \n[37] globals_0.16.2      lme4_1.1-33         timechange_0.2.0   \n[40] lifecycle_1.0.3     future_1.33.0       MASS_7.3-55        \n[43] zoo_1.8-12          ipred_0.9-14        hms_1.1.3          \n[46] parallel_4.1.2      yaml_2.3.7          StanHeaders_2.26.27\n[49] stringi_1.7.12      foreach_1.5.2       lhs_1.1.6          \n[52] hardhat_1.3.0       boot_1.3-28         lava_1.7.2.1       \n[55] pkgconfig_2.0.3     evaluate_0.21       lattice_0.20-45    \n[58] labeling_0.4.2      htmlwidgets_1.6.2   bit_4.0.5          \n[61] tidyselect_1.2.0    parallelly_1.36.0   magrittr_2.0.3     \n[64] R6_2.5.1            generics_0.1.3      pillar_1.9.0       \n[67] withr_2.5.0         xts_0.13.1          survival_3.2-13    \n[70] nnet_7.3-17         future.apply_1.11.0 utf8_1.2.3         \n[73] tzdb_0.4.0          rmarkdown_2.23      grid_4.1.2         \n[76] data.table_1.14.8   digest_0.6.32       RcppParallel_5.1.7 \n[79] GPfit_1.0-8         munsell_0.5.0      \n```\n:::\n:::\n",
    "supporting": [
      "dengue_ts_global_subset_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}