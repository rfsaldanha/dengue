{
  "hash": "3392ac41081d66ef7f7a3d230392a427",
  "result": {
    "markdown": "---\ntitle: \"Global and subset models\"\nauthor: \"Raphael Saldanha\"\ndate: last-modified\n---\n\n\nReference: https://blog.bguarisma.com/series/time-series-forecasting\n\n## Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(arrow)\nlibrary(tidymodels)\nlibrary(bonsai)\nlibrary(finetune)\nlibrary(modeltime)\nlibrary(timetk)\nlibrary(dtwclust)\nlibrary(kableExtra)\nlibrary(tictoc)\n```\n:::\n\n\n## Load data\n\nAnd remove rows with NAs\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntdengue <- read_parquet(file = \"tdengue.parquet\") %>%\n  drop_na() %>%\n  select(mun, date, starts_with(\"cases\"))\n```\n:::\n\n\n## Clustering\n\n### Prepare data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdengue <- tdengue %>%\n  select(mun, date, cases) %>%\n  mutate(mun = paste0(\"m_\", mun)) %>%\n  arrange(mun, date) %>%\n  pivot_wider(names_from = mun, values_from = cases) %>%\n  select(-date) %>%\n  t() %>%\n  tslist()\n```\n:::\n\n\n### SBD method\n\n\n::: {.cell}\n\n```{.r .cell-code}\nk_seq <- 3:8\n\ntic()\nclust <- tsclust(\n  series = cdengue, \n  type = \"partitional\", \n  k = k_seq,\n  distance = \"sbd\",\n  seed = 123\n)\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.251 sec elapsed\n```\n:::\n:::\n\n\n### Cluster Validity Indices (CVI)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(clust) <- paste0(\"k_\", k_seq)\nres_cvi <- sapply(clust, cvi, type = \"internal\") %>% \n  t() %>%\n  as_tibble(rownames = \"k\") %>%\n  arrange(-Sil)\n\nres_cvi %>%\n  kbl() %>%\n  kable_styling()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> k </th>\n   <th style=\"text-align:right;\"> Sil </th>\n   <th style=\"text-align:right;\"> SF </th>\n   <th style=\"text-align:right;\"> CH </th>\n   <th style=\"text-align:right;\"> DB </th>\n   <th style=\"text-align:right;\"> DBstar </th>\n   <th style=\"text-align:right;\"> D </th>\n   <th style=\"text-align:right;\"> COP </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> k_3 </td>\n   <td style=\"text-align:right;\"> 0.1913461 </td>\n   <td style=\"text-align:right;\"> 0.3684628 </td>\n   <td style=\"text-align:right;\"> 70.22859 </td>\n   <td style=\"text-align:right;\"> 1.714735 </td>\n   <td style=\"text-align:right;\"> 2.044420 </td>\n   <td style=\"text-align:right;\"> 0.0566428 </td>\n   <td style=\"text-align:right;\"> 0.3474689 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> k_8 </td>\n   <td style=\"text-align:right;\"> 0.1490014 </td>\n   <td style=\"text-align:right;\"> 0.1126179 </td>\n   <td style=\"text-align:right;\"> 30.37884 </td>\n   <td style=\"text-align:right;\"> 2.410194 </td>\n   <td style=\"text-align:right;\"> 3.822109 </td>\n   <td style=\"text-align:right;\"> 0.0596007 </td>\n   <td style=\"text-align:right;\"> 0.3032652 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> k_7 </td>\n   <td style=\"text-align:right;\"> 0.1470096 </td>\n   <td style=\"text-align:right;\"> 0.1565806 </td>\n   <td style=\"text-align:right;\"> 29.04192 </td>\n   <td style=\"text-align:right;\"> 2.905818 </td>\n   <td style=\"text-align:right;\"> 3.418153 </td>\n   <td style=\"text-align:right;\"> 0.0670860 </td>\n   <td style=\"text-align:right;\"> 0.3176370 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> k_4 </td>\n   <td style=\"text-align:right;\"> 0.1200358 </td>\n   <td style=\"text-align:right;\"> 0.2998345 </td>\n   <td style=\"text-align:right;\"> 49.88156 </td>\n   <td style=\"text-align:right;\"> 2.833579 </td>\n   <td style=\"text-align:right;\"> 3.414727 </td>\n   <td style=\"text-align:right;\"> 0.0627945 </td>\n   <td style=\"text-align:right;\"> 0.3318179 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> k_6 </td>\n   <td style=\"text-align:right;\"> 0.1012948 </td>\n   <td style=\"text-align:right;\"> 0.1848656 </td>\n   <td style=\"text-align:right;\"> 42.58699 </td>\n   <td style=\"text-align:right;\"> 2.812613 </td>\n   <td style=\"text-align:right;\"> 4.260553 </td>\n   <td style=\"text-align:right;\"> 0.0384893 </td>\n   <td style=\"text-align:right;\"> 0.3013105 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> k_5 </td>\n   <td style=\"text-align:right;\"> 0.0514986 </td>\n   <td style=\"text-align:right;\"> 0.2966023 </td>\n   <td style=\"text-align:right;\"> 43.87629 </td>\n   <td style=\"text-align:right;\"> 4.495300 </td>\n   <td style=\"text-align:right;\"> 6.564451 </td>\n   <td style=\"text-align:right;\"> 0.0322457 </td>\n   <td style=\"text-align:right;\"> 0.3248770 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n### Select cluster with higher Silhouette statistic\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsel_clust <- clust[[res_cvi[[1,1]]]]\n\nplot(sel_clust)\n```\n\n::: {.cell-output-display}\n![](dengue_ts_global_subset_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n### Identify municipalities and cluster id\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncluster_ids <- tibble(\n  mun = names(cdengue) %>% substr(3, 9),\n  group = as.character(sel_clust@cluster)\n) \n```\n:::\n\n\n### Add partition information to dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntdengue <- left_join(tdengue, cluster_ids, by = \"mun\")\n```\n:::\n\n\n## Train and test split\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntdengue_split <- tdengue %>%\n  time_series_split(\n    date_var = date, \n    assess = 54*2,\n    cumulative = TRUE\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nData is not ordered by the 'date_var'. Resamples will be arranged by `date`.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nOverlapping Timestamps Detected. Processing overlapping time series together using sliding windows.\n```\n:::\n:::\n\n\n## K-folds\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntdengue_split_folds <- training(tdengue_split) %>%\n  vfold_cv(v = 10)\n```\n:::\n\n\n## Recipes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecipes_list <- list()\n```\n:::\n\n\n### Global\n\nUsing data from all municipalities.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecipe_global <- recipe(cases ~ ., data = training(tdengue_split)) %>%\n  step_rm(date, group) %>%\n  update_role(mun, new_role = \"id variable\")\n\nrecipes_list <- append(recipes_list, list(global = recipe_global))\n\nrm(recipe_global)\n```\n:::\n\n\n### Groups\n\nOne recipe for each group, with data only from the group.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(g in unique(tdengue$group)){\n  tmp <- recipe(cases ~ ., data = training(tdengue_split)) %>%\n    step_filter(group == !!g) %>%\n    step_rm(date, group) %>%\n    update_role(mun, new_role = \"id variable\")\n  \n  tmp <- list(tmp)\n  tmp <- setNames(tmp, paste0(\"g\", g))\n  \n  recipes_list <- append(recipes_list, tmp)\n  \n  rm(tmp)\n}\n```\n:::\n\n\n## Models specification\n\n### Random forest\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_spec <- rand_forest(\n  # trees = tune(),\n  # min_n = tune()\n) %>%\n  set_engine(\"ranger\") %>%\n  set_mode(\"regression\")\n```\n:::\n\n\n### LightGBM\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlgbm_spec <- boost_tree() %>%\n  set_engine(\"lightgbm\") %>%\n  set_mode(\"regression\")\n```\n:::\n\n\n## Workflow set\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_workflows <- workflow_set(\n  preproc = recipes_list, \n  models = list(rf = rf_spec), \n  cross = TRUE\n)\n```\n:::\n\n\n## Tune\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndoParallel::registerDoParallel()\n\ntic()\nrace_results <- \n  all_workflows %>%\n  workflow_map(\n    \"tune_race_anova\",\n    seed = 345,\n    resamples = tdengue_split_folds,\n    grid = 10,\n    control = control_race(parallel_over = \"everything\"),\n    verbose = TRUE\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ni\tNo tuning parameters. `fit_resamples()` will be attempted\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni 1 of 4 resampling: global_rf\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ 1 of 4 resampling: global_rf (4m 46.5s)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni\tNo tuning parameters. `fit_resamples()` will be attempted\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni 2 of 4 resampling: g3_rf\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ 2 of 4 resampling: g3_rf (23.4s)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni\tNo tuning parameters. `fit_resamples()` will be attempted\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni 3 of 4 resampling: g1_rf\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ 3 of 4 resampling: g1_rf (23.8s)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni\tNo tuning parameters. `fit_resamples()` will be attempted\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni 4 of 4 resampling: g2_rf\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ 4 of 4 resampling: g2_rf (3m 15.7s)\n```\n:::\n\n```{.r .cell-code}\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n530.097 sec elapsed\n```\n:::\n:::\n\n\n## Fit\n\nFor combination of each municipality, model and recipe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrained_models <- list()\nfor(w in unique(race_results$wflow_id)){\n  best_tune <- race_results %>%\n    extract_workflow_set_result(w) %>%\n    select_best(\"rmse\")\n  \n  final_fit <- race_results %>%\n    extract_workflow(w) %>%\n    finalize_workflow(best_tune) %>%\n    fit(training(tdengue_split))\n  \n  mold <- extract_mold(final_fit)\n  train_ids <- mold$extras$roles$`id variable` %>%\n    distinct() %>%\n    pull() %>%\n    as.character()\n  \n  final_fit <- list(\n    list(\n      \"final_fit\" = final_fit, \n      \"train_ids\" = train_ids\n    )\n  )\n  \n  final_fit <- setNames(final_fit, paste0(w))\n  \n  trained_models <- append(trained_models, final_fit)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmodels_accuracy <- tibble()\nfor(t in 1:length(trained_models)){\n  \n  model_tbl <- modeltime_table(trained_models[[t]][[1]]) \n  testing_set <- testing(tdengue_split) %>%\n    filter(mun %in% trained_models[[t]][[2]])\n  \n\n  calib_tbl <- model_tbl %>%\n      modeltime_calibrate(\n        new_data = testing_set, \n        id       = \"mun\"\n      )\n  \n  res <- calib_tbl %>% \n      modeltime_accuracy(\n        acc_by_id = TRUE, \n        metric_set = metric_set(rmse)\n      )\n  \n  res$.model_id <- word(names(trained_models[t]), 1, sep = \"_\")\n  \n  models_accuracy <- bind_rows(models_accuracy, res)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = models_accuracy, aes(x = .model_id, y = rmse, fill = .model_desc)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](dengue_ts_global_subset_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n## Session info\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.1.2 (2021-11-01)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0\nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0\n\nRandom number generation:\n RNG:     L'Ecuyer-CMRG \n Normal:  Inversion \n Sample:  Rejection \n \nlocale:\n [1] LC_CTYPE=pt_BR.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] ranger_0.15.1      tictoc_1.2         kableExtra_1.3.4   dtwclust_5.5.12   \n [5] dtw_1.23-1         proxy_0.4-27       timetk_2.8.3       modeltime_1.2.7   \n [9] finetune_1.1.0     bonsai_0.2.1       yardstick_1.2.0    workflowsets_1.0.1\n[13] workflows_1.1.3    tune_1.1.1         rsample_1.1.1      recipes_1.0.6     \n[17] parsnip_1.1.0      modeldata_1.1.0    infer_1.0.4        dials_1.2.0       \n[21] scales_1.2.1       broom_1.0.5        tidymodels_1.1.0   arrow_12.0.1      \n[25] lubridate_1.9.2    forcats_1.0.0      stringr_1.5.0      dplyr_1.1.2       \n[29] purrr_1.0.1        readr_2.1.4        tidyr_1.3.0        tibble_3.2.1      \n[33] ggplot2_3.4.2      tidyverse_2.0.0   \n\nloaded via a namespace (and not attached):\n  [1] backports_1.4.1     systemfonts_1.0.4   plyr_1.8.8         \n  [4] splines_4.1.2       listenv_0.9.0       digest_0.6.32      \n  [7] foreach_1.5.2       htmltools_0.5.5     fansi_1.0.4        \n [10] magrittr_2.0.3      cluster_2.1.2       doParallel_1.0.17  \n [13] tzdb_0.4.0          globals_0.16.2      gower_1.0.1        \n [16] RcppParallel_5.1.7  xts_0.13.1          svglite_2.1.1      \n [19] hardhat_1.3.0       timechange_0.2.0    prettyunits_1.1.1  \n [22] colorspace_2.1-0    rvest_1.0.3         ggrepel_0.9.3      \n [25] xfun_0.39           jsonlite_1.8.7      survival_3.2-13    \n [28] zoo_1.8-12          iterators_1.0.14    glue_1.6.2         \n [31] gtable_0.3.3        ipred_0.9-14        webshot_0.5.5      \n [34] future.apply_1.11.0 Rcpp_1.0.10         viridisLite_0.4.2  \n [37] xtable_1.8-4        clue_0.3-64         GPfit_1.0-8        \n [40] bit_4.0.5           stats4_4.1.2        lava_1.7.2.1       \n [43] StanHeaders_2.26.27 prodlim_2023.03.31  htmlwidgets_1.6.2  \n [46] httr_1.4.6          modeltools_0.2-23   ellipsis_0.3.2     \n [49] pkgconfig_2.0.3     farver_2.1.1        nnet_7.3-17        \n [52] utf8_1.2.3          tidyselect_1.2.0    labeling_0.4.2     \n [55] rlang_1.1.1         DiceDesign_1.9      reshape2_1.4.4     \n [58] later_1.3.1         munsell_0.5.0       tools_4.1.2        \n [61] cli_3.6.1           generics_0.1.3      evaluate_0.21      \n [64] fastmap_1.1.1       yaml_2.3.7          knitr_1.43         \n [67] bit64_4.0.5         future_1.33.0       mime_0.12          \n [70] xml2_1.3.4          flexclust_1.4-1     compiler_4.1.2     \n [73] rstudioapi_0.14     lhs_1.1.6           stringi_1.7.12     \n [76] highr_0.10          RSpectra_0.16-1     lattice_0.20-45    \n [79] Matrix_1.5-4.1      shinyjs_2.1.0       vctrs_0.6.3        \n [82] pillar_1.9.0        lifecycle_1.0.3     furrr_0.3.1        \n [85] data.table_1.14.8   httpuv_1.6.11       R6_2.5.1           \n [88] promises_1.2.0.1    parallelly_1.36.0   codetools_0.2-18   \n [91] MASS_7.3-55         assertthat_0.2.1    withr_2.5.0        \n [94] parallel_4.1.2      hms_1.1.3           grid_4.1.2         \n [97] rpart_4.1.16        timeDate_4022.108   class_7.3-20       \n[100] rmarkdown_2.23      shiny_1.7.4        \n```\n:::\n:::\n",
    "supporting": [
      "dengue_ts_global_subset_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}