{
  "hash": "a437ba18d0c7c2fc1fbf2346683320a3",
  "result": {
    "markdown": "---\ntitle: \"Model simplified reference dataset\"\nauthor: Raphael Saldanha\ndate: last-modified\n---\n\n\nOn this notebook, models are trained and tested based on the **simplified version** of the reference dataset.\n\n## Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(arrow)\nlibrary(qs)\nlibrary(tidymodels)\nlibrary(themis)\nlibrary(finetune)\nlibrary(bonsai)\nlibrary(tictoc)\nlibrary(vip)\nlibrary(sessioninfo)\nlibrary(doParallel)\nsource(\"../../functions.R\")\n\nregisterDoParallel()\n```\n:::\n\n\n## Data load\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndc_ref_simp <- qread(file = \"dc_ref_simp.qs\")\n```\n:::\n\n\n## Dataset split\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndc_ref_simp_split <- initial_split(\n  data = dc_ref_simp, \n  prop = 3/4, \n  strata = CLASSI_FIN\n)\n\ndc_ref_simp_training <- training(dc_ref_simp_split)\ndc_ref_simp_testing <- testing(dc_ref_simp_split)\n```\n:::\n\n\n### Folding\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndc_ref_simp_split_folds <- dc_ref_simp_training |>\n  vfold_cv(v = 5, strata = CLASSI_FIN)\n```\n:::\n\n\n## Recipes\n\n### Variable lists\n\n\n::: {.cell}\n\n```{.r .cell-code}\nto_dummy <- c('CS_SEXO', 'CS_GESTANT')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsymp_cond_vars <- c(\"FEBRE\", \"MIALGIA\", \"CEFALEIA\", \n                    \"EXANTEMA\", \"VOMITO\", \"NAUSEA\", \n                    \"DOR_COSTAS\", \"CONJUNTVIT\", \n                    \"ARTRITE\", \"ARTRALGIA\", \"PETEQUIA_N\", \n                    \"LEUCOPENIA\", \"LACO\", \"DOR_RETRO\", \n                    \"DIABETES\", \"HEMATOLOG\", \"HEPATOPAT\", \n                    \"RENAL\", \"HIPERTENSA\", \"ACIDO_PEPT\",\n                    \"AUTO_IMUNE\")\n```\n:::\n\n\n### Basic recipe\n\n-   Only case symptoms\n\n-   Symptoms with missing data\n\n-   Without date and municipality data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_ref_simp_1 <- recipe(CLASSI_FIN ~ ., data = dc_ref_simp_training) |>\n  step_unknown(all_of(to_dummy)) |>\n  step_other(CS_GESTANT) |>\n  step_dummy(all_of(to_dummy)) |>\n  step_rm(CRITERIO, case_source, ID_MN_RESI, uf_res, DT_SIN_PRI)\n```\n:::\n\n\n### Basic recipe with missing data replacement\n\n-   Only case symptoms\n\n-   Symptoms without missing data\n\n-   Without date and municipality data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_ref_simp_2 <- recipe(CLASSI_FIN ~ ., data = dc_ref_simp_training) |>\n  step_unknown(all_of(to_dummy)) |>\n  step_other(CS_GESTANT) |>\n  step_dummy(all_of(to_dummy)) |>\n  step_mutate_at(all_of(symp_cond_vars), fn = ~replace_na(., 0)) |>\n  step_rm(CRITERIO, case_source, ID_MN_RESI, uf_res, DT_SIN_PRI)\n```\n:::\n\n\n### Date recipe\n\n-   Case symptoms and date (month)\n\n-   Without UF\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_ref_simp_3 <- recipe(CLASSI_FIN ~ ., data = dc_ref_simp_training) |>\n  step_unknown(all_of(to_dummy)) |>\n  step_other(CS_GESTANT) |>\n  step_dummy(all_of(to_dummy)) |>\n  step_mutate_at(all_of(symp_cond_vars), fn = ~replace_na(., 0)) |>\n  step_rm(CRITERIO, case_source, ID_MN_RESI, uf_res) |>\n  step_date(DT_SIN_PRI, features = c(\"month\"), label = FALSE, keep_original_cols = FALSE)\n```\n:::\n\n\n### Date and UF recipe\n\n-   Case symptoms, date (month) and UF\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_ref_simp_4 <- recipe(CLASSI_FIN ~ ., data = dc_ref_simp_training) |>\n  step_unknown(all_of(to_dummy)) |>\n  step_other(CS_GESTANT) |>\n  step_dummy(all_of(to_dummy)) |>\n  step_mutate_at(all_of(symp_cond_vars), fn = ~replace_na(., 0)) |>\n  step_rm(CRITERIO, case_source, ID_MN_RESI) |>\n  step_date(DT_SIN_PRI, features = c(\"month\"), label = FALSE, keep_original_cols = FALSE) |>\n  step_dummy(uf_res)\n```\n:::\n\n\n## Learners\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxgb_spec <-\n  boost_tree(\n    trees = tune(),\n    # tree_depth = tune(),\n    min_n = tune(),\n    # loss_reduction = tune(),\n    learn_rate = tune()\n  ) |>\n  set_engine(\"xgboost\", event_level = \"second\") |>\n  set_mode(\"classification\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# lgbm_spec <-\n#   boost_tree(\n#     trees = tune(),\n#     tree_depth = tune(),\n#     min_n = tune(),\n#     loss_reduction = tune(),\n#     learn_rate = tune()\n#   ) |>\n#   set_engine(\"lightgbm\") |>\n#   set_mode(\"classification\")\n```\n:::\n\n\n## Workflow\n\n\n::: {.cell}\n\n```{.r .cell-code}\nref_simp_wf <- workflow_set(\n  preproc = list(\n    rec_ref_simp_1 = rec_ref_simp_1,\n    rec_ref_simp_2 = rec_ref_simp_2,\n    rec_ref_simp_3 = rec_ref_simp_3\n    #rec_ref_simp_4 = rec_ref_simp_4,\n    #rec_ref_simp_5 = rec_ref_simp_5\n  ), \n  models = list(xgb = xgb_spec), \n  cross = TRUE\n)\n```\n:::\n\n\n## Tuning\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrace_ctrl <- control_race(parallel_over = \"everything\")\n\nref_simp_tuning_results <- \n  ref_simp_wf |>\n  workflow_map(\n    \"tune_race_anova\",\n    seed = 345,\n    resamples = dc_ref_simp_split_folds,\n    grid = 10,\n    control = race_ctrl, \n    verbose = TRUE\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ni 1 of 3 tuning:     rec_ref_simp_1_xgb\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ 1 of 3 tuning:     rec_ref_simp_1_xgb (2m 53s)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni 2 of 3 tuning:     rec_ref_simp_2_xgb\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ 2 of 3 tuning:     rec_ref_simp_2_xgb (1m 59.6s)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni 3 of 3 tuning:     rec_ref_simp_3_xgb\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ 3 of 3 tuning:     rec_ref_simp_3_xgb (2m 6.8s)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nref_simp_tuning_ranking_results <- rank_results(ref_simp_tuning_results, rank_metric = \"roc_auc\")\n\nref_simp_tuning_ranking_results\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 24 × 9\n   wflow_id         .config .metric  mean std_err     n preprocessor model  rank\n   <chr>            <chr>   <chr>   <dbl>   <dbl> <int> <chr>        <chr> <int>\n 1 rec_ref_simp_3_… Prepro… accura… 0.609 0.00370     5 recipe       boos…     1\n 2 rec_ref_simp_3_… Prepro… roc_auc 0.654 0.00430     5 recipe       boos…     1\n 3 rec_ref_simp_3_… Prepro… accura… 0.610 0.00302     5 recipe       boos…     2\n 4 rec_ref_simp_3_… Prepro… roc_auc 0.653 0.00541     5 recipe       boos…     2\n 5 rec_ref_simp_3_… Prepro… accura… 0.607 0.00275     5 recipe       boos…     3\n 6 rec_ref_simp_3_… Prepro… roc_auc 0.653 0.00454     5 recipe       boos…     3\n 7 rec_ref_simp_3_… Prepro… accura… 0.606 0.00296     5 recipe       boos…     4\n 8 rec_ref_simp_3_… Prepro… roc_auc 0.652 0.00422     5 recipe       boos…     4\n 9 rec_ref_simp_2_… Prepro… accura… 0.596 0.00347     5 recipe       boos…     5\n10 rec_ref_simp_2_… Prepro… roc_auc 0.630 0.00340     5 recipe       boos…     5\n# ℹ 14 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(ref_simp_tuning_results, metric = \"roc_auc\")\n```\n\n::: {.cell-output-display}\n![](03_model_ref_simp_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n## Model last fit\n\n\n::: {.cell}\n\n```{.r .cell-code}\nref_simp_selection <- ref_simp_tuning_ranking_results |>\n  arrange(-mean) |>\n  pull(wflow_id) |>\n  first()\n\nref_simp_selection\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"rec_ref_simp_3_xgb\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nref_simp_best_results <- ref_simp_tuning_results |>\n  extract_workflow_set_result(ref_simp_selection) |>\n  select_best(\"roc_auc\")\n\nref_simp_best_results\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  trees min_n learn_rate .config              \n  <int> <int>      <dbl> <chr>                \n1   726    14    0.00842 Preprocessor1_Model04\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nref_simp_last_fit <- ref_simp_tuning_results |>\n  extract_workflow(ref_simp_selection) |>\n  finalize_workflow(ref_simp_best_results) |>\n  last_fit(dc_ref_simp_split)\n```\n:::\n\n\n## Model evaluation\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_metrics(ref_simp_last_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  .metric  .estimator .estimate .config             \n  <chr>    <chr>          <dbl> <chr>               \n1 accuracy binary         0.608 Preprocessor1_Model1\n2 roc_auc  binary         0.652 Preprocessor1_Model1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_predictions(ref_simp_last_fit) %>%\n    conf_mat(CLASSI_FIN, .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Truth\nPrediction Negative Positive\n  Negative     1571      989\n  Positive      846     1281\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nref_simp_last_fit %>%\n  extract_fit_engine() %>%\n  vip()\n```\n\n::: {.cell-output-display}\n![](03_model_ref_simp_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n## Session info\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsession_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.2 (2023-10-31)\n os       CentOS Linux 7 (Core)\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  pt_BR.UTF-8\n ctype    pt_BR.UTF-8\n tz       America/Sao_Paulo\n date     2024-02-13\n pandoc   3.1.1 @ /home/raphaelfs/miniconda3/envs/quarto/bin/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package       * version    date (UTC) lib source\n arrow         * 14.0.1     2023-11-14 [2] local\n assertthat      0.2.1      2019-03-21 [1] CRAN (R 4.2.2)\n backports       1.4.1      2021-12-13 [1] CRAN (R 4.2.2)\n bit             4.0.5      2022-11-15 [1] CRAN (R 4.2.2)\n bit64           4.0.5      2020-08-30 [1] CRAN (R 4.2.2)\n bonsai        * 0.2.1      2022-11-29 [2] CRAN (R 4.3.0)\n boot            1.3-28.1   2022-11-22 [1] CRAN (R 4.2.2)\n broom         * 1.0.4      2023-03-11 [1] CRAN (R 4.2.0)\n class           7.3-22     2023-05-03 [1] CRAN (R 4.2.0)\n cli             3.6.1      2023-03-23 [1] CRAN (R 4.2.0)\n clock           0.7.0      2023-05-15 [1] CRAN (R 4.2.0)\n codetools       0.2-19     2023-02-01 [1] CRAN (R 4.2.0)\n colorspace      2.1-0      2023-01-23 [1] CRAN (R 4.2.2)\n data.table      1.14.8     2023-02-17 [1] CRAN (R 4.2.2)\n dials         * 1.2.0      2023-04-03 [1] CRAN (R 4.2.0)\n DiceDesign      1.9        2021-02-13 [1] CRAN (R 4.2.2)\n digest          0.6.31     2022-12-11 [1] CRAN (R 4.2.2)\n doParallel    * 1.0.17     2022-02-07 [1] CRAN (R 4.2.2)\n dplyr         * 1.1.2      2023-04-20 [1] CRAN (R 4.2.0)\n ellipsis        0.3.2      2021-04-29 [1] CRAN (R 4.2.2)\n evaluate        0.21       2023-05-05 [1] CRAN (R 4.2.0)\n fansi           1.0.4      2023-01-22 [1] CRAN (R 4.2.2)\n farver          2.1.1      2022-07-06 [1] CRAN (R 4.2.2)\n fastmap         1.1.1      2023-02-24 [1] CRAN (R 4.2.2)\n finetune      * 1.1.0      2023-04-19 [2] CRAN (R 4.3.0)\n forcats       * 1.0.0      2023-01-29 [1] CRAN (R 4.2.2)\n foreach       * 1.5.2      2022-02-02 [1] CRAN (R 4.2.2)\n furrr           0.3.1      2022-08-15 [1] CRAN (R 4.2.2)\n future          1.32.0     2023-03-07 [1] CRAN (R 4.2.0)\n future.apply    1.11.0     2023-05-21 [1] CRAN (R 4.2.0)\n generics        0.1.3      2022-07-05 [1] CRAN (R 4.2.2)\n ggplot2       * 3.4.2      2023-04-03 [1] CRAN (R 4.2.0)\n globals         0.16.2     2022-11-21 [1] CRAN (R 4.2.2)\n glue            1.6.2      2022-02-24 [1] CRAN (R 4.2.2)\n gower           1.0.1      2022-12-22 [1] CRAN (R 4.2.2)\n GPfit           1.0-8      2019-02-08 [1] CRAN (R 4.2.2)\n gtable          0.3.3      2023-03-21 [1] CRAN (R 4.2.0)\n hardhat         1.3.0      2023-03-30 [1] CRAN (R 4.2.0)\n hms             1.1.3      2023-03-21 [1] CRAN (R 4.2.0)\n htmltools       0.5.5      2023-03-23 [1] CRAN (R 4.2.0)\n htmlwidgets     1.6.2      2023-03-17 [1] CRAN (R 4.2.0)\n infer         * 1.0.4      2022-12-02 [1] CRAN (R 4.2.2)\n ipred           0.9-13     2022-06-02 [1] CRAN (R 4.2.2)\n iterators     * 1.0.14     2022-02-05 [1] CRAN (R 4.2.2)\n jsonlite        1.8.5      2023-06-05 [1] CRAN (R 4.2.0)\n knitr           1.43       2023-05-25 [1] CRAN (R 4.2.0)\n labeling        0.4.2      2020-10-20 [1] CRAN (R 4.2.2)\n lattice         0.21-8     2023-04-05 [1] CRAN (R 4.2.0)\n lava            1.7.2.1    2023-02-27 [1] CRAN (R 4.2.2)\n lhs             1.1.6      2022-12-17 [1] CRAN (R 4.2.2)\n lifecycle       1.0.3      2022-10-07 [1] CRAN (R 4.2.2)\n listenv         0.9.0      2022-12-16 [1] CRAN (R 4.2.2)\n lme4            1.1-35.1   2023-11-05 [2] CRAN (R 4.3.2)\n lubridate     * 1.9.2      2023-02-10 [1] CRAN (R 4.2.2)\n magrittr        2.0.3      2022-03-30 [1] CRAN (R 4.2.2)\n MASS            7.3-60     2023-05-04 [1] CRAN (R 4.2.0)\n Matrix          1.5-4.1    2023-05-18 [1] CRAN (R 4.2.0)\n minqa           1.2.6      2023-09-11 [2] CRAN (R 4.3.1)\n modeldata     * 1.1.0      2023-01-25 [1] CRAN (R 4.2.2)\n munsell         0.5.0      2018-06-12 [1] CRAN (R 4.2.2)\n nlme            3.1-162    2023-01-31 [1] CRAN (R 4.2.2)\n nloptr          2.0.3      2022-05-26 [2] CRAN (R 4.3.0)\n nnet            7.3-19     2023-05-03 [1] CRAN (R 4.2.0)\n parallelly      1.36.0     2023-05-26 [1] CRAN (R 4.2.0)\n parsnip       * 1.1.0      2023-04-12 [1] CRAN (R 4.2.0)\n pillar          1.9.0      2023-03-22 [1] CRAN (R 4.2.0)\n pkgconfig       2.0.3      2019-09-22 [1] CRAN (R 4.2.2)\n prettyunits     1.1.1      2020-01-24 [1] CRAN (R 4.2.2)\n prodlim         2019.11.13 2019-11-17 [1] CRAN (R 4.2.2)\n purrr         * 1.0.1      2023-01-10 [1] CRAN (R 4.2.2)\n qs            * 0.25.5     2023-02-22 [1] CRAN (R 4.2.3)\n R6              2.5.1      2021-08-19 [1] CRAN (R 4.2.2)\n RApiSerialize   0.1.2      2022-08-25 [1] CRAN (R 4.2.3)\n Rcpp            1.0.10     2023-01-22 [1] CRAN (R 4.2.2)\n RcppParallel    5.1.7      2023-02-27 [1] CRAN (R 4.2.2)\n readr         * 2.1.4      2023-02-10 [1] CRAN (R 4.2.2)\n recipes       * 1.0.6      2023-04-25 [1] CRAN (R 4.2.0)\n rlang         * 1.1.1      2023-04-28 [1] CRAN (R 4.2.0)\n rmarkdown       2.22       2023-06-01 [1] CRAN (R 4.2.0)\n ROSE            0.0-4      2021-06-14 [2] CRAN (R 4.3.0)\n rpart           4.1.19     2022-10-21 [1] CRAN (R 4.2.0)\n rsample       * 1.2.0      2023-08-23 [1] CRAN (R 4.3.2)\n rstudioapi      0.14       2022-08-22 [1] CRAN (R 4.2.2)\n scales        * 1.2.1      2022-08-20 [1] CRAN (R 4.2.2)\n sessioninfo   * 1.2.2      2021-12-06 [1] CRAN (R 4.2.1)\n stringfish      0.15.8     2023-05-30 [1] CRAN (R 4.2.3)\n stringi         1.7.12     2023-01-11 [1] CRAN (R 4.2.2)\n stringr       * 1.5.0      2022-12-02 [1] CRAN (R 4.2.2)\n survival        3.5-5      2023-03-12 [1] CRAN (R 4.2.0)\n themis        * 1.0.2      2023-08-14 [2] CRAN (R 4.3.1)\n tibble        * 3.2.1      2023-03-20 [1] CRAN (R 4.2.0)\n tictoc        * 1.2        2023-04-23 [1] CRAN (R 4.2.0)\n tidymodels    * 1.0.0      2022-07-13 [1] CRAN (R 4.2.2)\n tidyr         * 1.3.0      2023-01-24 [1] CRAN (R 4.2.2)\n tidyselect      1.2.0      2022-10-10 [1] CRAN (R 4.2.2)\n tidyverse     * 2.0.0      2023-02-22 [2] CRAN (R 4.3.0)\n timechange      0.2.0      2023-01-11 [1] CRAN (R 4.2.1)\n timeDate        4022.108   2023-01-07 [1] CRAN (R 4.2.2)\n tune          * 1.1.2      2023-08-23 [1] CRAN (R 4.3.2)\n tzdb            0.4.0      2023-05-12 [1] CRAN (R 4.2.0)\n utf8            1.2.3      2023-01-31 [1] CRAN (R 4.2.2)\n vctrs           0.6.3      2023-06-14 [1] CRAN (R 4.2.3)\n vip           * 0.4.1      2023-08-21 [2] CRAN (R 4.3.1)\n withr           2.5.0      2022-03-03 [1] CRAN (R 4.2.2)\n workflows     * 1.1.3      2023-02-22 [1] CRAN (R 4.2.2)\n workflowsets  * 1.0.0      2022-07-12 [1] CRAN (R 4.2.2)\n xfun            0.39       2023-04-20 [1] CRAN (R 4.2.0)\n xgboost       * 1.7.5.1    2023-03-30 [1] CRAN (R 4.2.0)\n yaml            2.3.7      2023-01-23 [1] CRAN (R 4.2.2)\n yardstick     * 1.2.0      2023-04-21 [1] CRAN (R 4.2.0)\n\n [1] /home/raphaelfs/rlibs\n [2] /home/raphaelfs/miniconda3/envs/quarto/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n",
    "supporting": [
      "03_model_ref_simp_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}